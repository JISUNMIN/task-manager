generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum ProjectLabel {
  feature
  bug
  design
  refactor
  client
  internal
  maintenance
}

model User {
  id           Int     @id @default(autoincrement())
  userId       String  @unique
  password     String
  name         String
  profileImage String?
  role         Role    @default(USER)

  tasks        Task[]    @relation("TaskAssignees") // 내가 맡은 일
  managedTasks Task[]    @relation("ManagingUser") // 내가 관리하는 일
  comments     Comment[]
  projects     Project[] @relation("ProjectManager") // 내가 담당하는 프로젝트들
}

model Project {
  id          Int           @id @default(autoincrement())
  projectName String
  progress    Int
  deadline    DateTime?
  managerId   Int
  isPersonal  Boolean       @default(false) // 개인용 프로젝트 여부 구분용
  label       ProjectLabel?

  order Int? @default(0)

  manager User   @relation("ProjectManager", fields: [managerId], references: [id])
  tasks   Task[]
}

model Task {
  id        Int    @id @default(autoincrement())
  title     String
  desc      String
  status    String
  projectId Int
  managerId Int

  manager  User      @relation("ManagingUser", fields: [managerId], references: [id])
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments Comment[]

  // 할당된 담당자들
  assignees User[] @relation("TaskAssignees")
}

model Comment {
  id              Int    @id @default(autoincrement())
  comment         String
  userId          Int
  taskId          Int
  parentCommentId Int? // 부모 댓글 ID (nullable)

  createdAt DateTime @default(now()) // 생성 시 자동 설정
  updatedAt DateTime @updatedAt // 수정 시 자동 업데이트

  parentComment Comment?  @relation("CommentToReplies", fields: [parentCommentId], references: [id])
  replies       Comment[] @relation("CommentToReplies")

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
